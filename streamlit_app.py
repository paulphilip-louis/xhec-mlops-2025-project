"""
Streamlit Interface for Abalone Age Prediction
Interacts with the FastAPI backend to make predictions
"""

import streamlit as st
import requests
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from typing import Dict, Any

# Configuration de la page
st.set_page_config(
    page_title="üêö Abalone Age Prediction",
    page_icon="üêö",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Configuration de l'API
API_BASE_URL = "http://localhost:8000"  # URL de l'API FastAPI
PREDICT_ENDPOINT = f"{API_BASE_URL}/predict"
HEALTH_ENDPOINT = f"{API_BASE_URL}/"


def check_api_health() -> bool:
    """V√©rifier si l'API est accessible"""
    try:
        response = requests.get(HEALTH_ENDPOINT, timeout=5)
        return response.status_code == 200
    except requests.exceptions.RequestException:
        return False


def make_prediction(data: Dict[str, Any]) -> Dict[str, Any]:
    """Faire une pr√©diction via l'API"""
    try:
        response = requests.post(PREDICT_ENDPOINT, json=data, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"Erreur lors de la pr√©diction: {str(e)}")
        return None


def load_sample_data() -> pd.DataFrame:
    """Charger des donn√©es d'exemple pour la d√©monstration"""
    try:
        df = pd.read_csv("data/abalone.csv")
        return df.sample(n=min(100, len(df)))  # √âchantillon de 100 lignes max
    except FileNotFoundError:
        st.warning("Fichier de donn√©es non trouv√©. Utilisation de donn√©es simul√©es.")
        return pd.DataFrame(
            {
                "Sex": ["M", "F", "I"] * 10,
                "Length": np.random.uniform(0.1, 0.8, 30),
                "Diameter": np.random.uniform(0.1, 0.7, 30),
                "Height": np.random.uniform(0.01, 0.3, 30),
                "Whole weight": np.random.uniform(0.1, 2.0, 30),
                "Shucked weight": np.random.uniform(0.05, 1.0, 30),
                "Viscera weight": np.random.uniform(0.01, 0.5, 30),
                "Shell weight": np.random.uniform(0.01, 0.5, 30),
                "Rings": np.random.randint(1, 30, 30),
            }
        )


def main():
    """Interface principale Streamlit"""

    # En-t√™te
    st.title("üêö Pr√©diction de l'√Çge des Abalones")
    st.markdown(
        """
    Cette application utilise un mod√®le de machine learning pour pr√©dire l'√¢ge d'une abalone
    (escargot de mer) en se basant sur ses caract√©ristiques physiques.
    """
    )

    # V√©rification de l'API
    with st.spinner("V√©rification de la connexion √† l'API..."):
        api_healthy = check_api_health()

    if not api_healthy:
        st.error(
            "‚ùå L'API FastAPI n'est pas accessible. Assurez-vous qu'elle est d√©marr√©e sur http://localhost:8001"
        )
        st.stop()
    else:
        st.success("‚úÖ Connexion √† l'API √©tablie")

    # Sidebar pour la saisie des donn√©es
    st.sidebar.header("üìä Caract√©ristiques de l'Abalone")

    # Saisie des donn√©es
    sex = st.sidebar.selectbox(
        "Sexe", options=["M", "F", "I"], help="M = M√¢le, F = Femelle, I = Immature"
    )

    length = st.sidebar.slider(
        "Longueur (mm)",
        min_value=0.0,
        max_value=1.0,
        value=0.5,
        step=0.001,
        help="Longueur maximale de la coquille",
    )

    diameter = st.sidebar.slider(
        "Diam√®tre (mm)",
        min_value=0.0,
        max_value=1.0,
        value=0.4,
        step=0.001,
        help="Diam√®tre perpendiculaire √† la longueur",
    )

    height = st.sidebar.slider(
        "Hauteur (mm)",
        min_value=0.0,
        max_value=1.0,
        value=0.15,
        step=0.001,
        help="Hauteur avec la viande √† l'int√©rieur",
    )

    whole_weight = st.sidebar.slider(
        "Poids total (g)",
        min_value=0.0,
        max_value=3.0,
        value=0.8,
        step=0.001,
        help="Poids total de l'abalone",
    )

    shucked_weight = st.sidebar.slider(
        "Poids de la viande (g)",
        min_value=0.0,
        max_value=2.0,
        value=0.3,
        step=0.001,
        help="Poids de la viande apr√®s avoir retir√© la coquille",
    )

    viscera_weight = st.sidebar.slider(
        "Poids des visc√®res (g)",
        min_value=0.0,
        max_value=1.0,
        value=0.15,
        step=0.001,
        help="Poids des visc√®res apr√®s avoir retir√© la coquille",
    )

    shell_weight = st.sidebar.slider(
        "Poids de la coquille (g)",
        min_value=0.0,
        max_value=1.0,
        value=0.2,
        step=0.001,
        help="Poids de la coquille apr√®s s√©chage",
    )

    # Bouton de pr√©diction
    if st.sidebar.button("üîÆ Pr√©dire l'√Çge", type="primary"):
        # Pr√©paration des donn√©es pour l'API
        input_data = {
            "sex": sex,
            "length": length,
            "diameter": diameter,
            "height": height,
            "whole_weight": whole_weight,
            "shucked_weight": shucked_weight,
            "viscera_weight": viscera_weight,
            "shell_weight": shell_weight,
        }

        # Affichage des donn√©es saisies
        st.subheader("üìã Donn√©es saisies")
        df_input = pd.DataFrame([input_data])
        st.dataframe(df_input, use_container_width=True)

        # Pr√©diction
        with st.spinner("üîÆ Calcul de la pr√©diction..."):
            prediction = make_prediction(input_data)

        if prediction:
            st.subheader("üéØ R√©sultat de la Pr√©diction")

            # Affichage du r√©sultat
            predicted_age = prediction.get("predicted_age", "N/A")
            confidence = prediction.get("confidence", "N/A")

            col1, col2 = st.columns(2)

            with col1:
                st.metric(
                    label="√Çge Pr√©dit (anneaux)",
                    value=f"{predicted_age:.1f}",
                    help="Nombre d'anneaux de croissance pr√©dit",
                )

            with col2:
                st.metric(
                    label="Confiance",
                    value=f"{confidence:.2%}"
                    if isinstance(confidence, (int, float))
                    else "N/A",
                    help="Niveau de confiance de la pr√©diction",
                )

            # Visualisation
            st.subheader("üìä Visualisation")

            # Graphique de comparaison avec les donn√©es d'exemple
            sample_data = load_sample_data()

            fig = px.scatter(
                sample_data,
                x="Whole weight",
                y="Rings",
                color="Sex",
                title="Comparaison avec les donn√©es d'entra√Ænement",
                labels={"Whole weight": "Poids Total (g)", "Rings": "√Çge (anneaux)"},
                hover_data=["Length", "Diameter", "Height"],
            )

            # Ajouter le point de pr√©diction
            fig.add_trace(
                go.Scatter(
                    x=[whole_weight],
                    y=[predicted_age],
                    mode="markers",
                    marker=dict(size=15, color="red", symbol="star"),
                    name="Votre pr√©diction",
                    hovertemplate=f"<b>Votre abalone</b><br>Poids: {whole_weight:.3f}g<br>√Çge pr√©dit: {predicted_age:.1f} anneaux<extra></extra>",
                )
            )

            st.plotly_chart(fig, use_container_width=True)

    # Section d'analyse des donn√©es
    st.subheader("üìà Analyse des Donn√©es")

    # Chargement des donn√©es d'exemple
    sample_data = load_sample_data()

    if not sample_data.empty:
        # Statistiques descriptives
        st.subheader("üìä Statistiques Descriptives")

        col1, col2 = st.columns(2)

        with col1:
            st.write("**Distribution par sexe:**")
            sex_counts = sample_data["Sex"].value_counts()
            st.bar_chart(sex_counts)

        with col2:
            st.write("**Distribution de l'√¢ge:**")
            st.bar_chart(sample_data["Rings"].value_counts().sort_index())

        # Corr√©lations
        st.subheader("üîó Corr√©lations")
        numeric_cols = sample_data.select_dtypes(include=[np.number]).columns
        corr_matrix = sample_data[numeric_cols].corr()

        fig_corr = px.imshow(
            corr_matrix,
            text_auto=True,
            aspect="auto",
            title="Matrice de corr√©lation des caract√©ristiques num√©riques",
        )
        st.plotly_chart(fig_corr, use_container_width=True)

        # Tableau des donn√©es
        st.subheader("üìã Donn√©es d'Exemple")
        st.dataframe(sample_data.head(10), use_container_width=True)

    # Footer
    st.markdown("---")
    st.markdown(
        """
    <div style='text-align: center; color: #666;'>
        <p>üêö MLOps Project - Pr√©diction de l'√Çge des Abalones</p>
        <p>Interface Streamlit int√©gr√©e avec FastAPI</p>
    </div>
    """,
        unsafe_allow_html=True,
    )


if __name__ == "__main__":
    main()
